---
layout:     post
title:      "操作系统"
subtitle:   "操作系统"
date:       2020-09-02
author:     "Lerko"
header-img: "http://chenyingqiao.github.io/img/20200806224734.png"
catalog: true
multilingual: false
tags:
    - TCP
---

# 进程通讯：管道

代表共享资源的数据结构及并发进程在其上执行的一组构成就构成管程

**匿名管道(pipe)**

1. 只能单向通信
2. 只能血缘关系的进程进行通信
3. 依赖于文件系统
4. 生命周期随进程
5. 面向字节流的服务
6. 管道内部提供了同步机制

![20200909210502](http://chenyingqiao.github.io/img/20200909210502.png)

**命名管道(FIFO): **

在管道中，只有具有血缘关系的进程才能进行通信，对于后来的命名管道，就解决了这个问题。FIFO不同于管道之处在于它提供一个路径名与之关联，以FIFO的文件形式存储于文件系统中。命名管道是一个设备文件，因此，即使进程与创建FIFO的进程不存在亲缘关系，只要可以访问该路径，就能够通过FIFO相互通信。值得注意的是， FIFO(first input first output)总是按照先进先出的原则工作，第一个被写入的数据将首先从管道中读出。

# 进程

![20200909215532](http://chenyingqiao.github.io/img/20200909215532.png)

1. 新建态(new): 进程被创建，尚未进入就绪队列。
2. 就绪态(ready): 进程具备运行条件，等待系统分配处理器。
3. 挂起就绪态(ready suspend)：进程具备运行条件，但目前在外存中。
4. 运行态(running): 进程占有处理器正在运行。
5. 终止态(exit): 进程达到正常结束点或被其他原因所终止，下一步将被撤销。
6. 等待态(wait): 又称阻塞态或休眠态。进程正在等待某个事件完成，目前不具备运行条件。
7. 挂起等待态(blocked suspend): 进程正在等待某个事件完成，并且在外存中。

进程封装管理信息，线程封装执行信息。
每个进程都必须有一个主线程

# 进程控制块

(Process Control Block, PCB)

进程存在的唯一标识，操作系统掌握进程的唯一资料结构和管理进程的主要依据。包括标识信息、现场信息和控制信息等信息。

# 进程队列

处于同一状态的所有进程的PCB链接在一起的数据结构。 
有两种队列组织方式：链接方式和索引方式。

# 内核态和用户态

进程切换必定在内核态而非用户态发生


# 分页存储

1. 页面：程逻辑地址空间分成大小相等的区，每个区称为页面或页。
2. 页框：称页帧。内存物理地址空间分成大小相等的区，其大小和页面大小相等，每个区就是一个页框
3. 内存页框表：页框表的表项给出物理块使用情况：0为空闲，1为占用
4. 页表：页表是操作系统为进程建立的，是程序页面和内存页框的对照表，页表的每一栏指明程序中的某一页面和分得的页框之间的关系。

![20200909211037](http://chenyingqiao.github.io/img/20200909211037.png)

# 中断

程序执行过程中遇到急需处理的事件时，暂时终止现行程序在CPU上的运行，转而执行相应的事件处理程序，待处理完成后再返回断点或调度其他程序的执行过程。

外中断(又称中断或异步中断)： 来自处理器之外的中断信号，如，时钟中断、键盘中断等。外中断可分为可屏蔽中断和非可屏蔽中断。

内中断(又称异常或同步中断)：来自处理器内部的中断信号，如，访管中断，硬件故障中断，程序性中断等。内中断不能被屏蔽。

中断和异常的响应： 发现中断源 → 保护现场 → 转向中断/异常事件处理程序执行 → 恢复现场


# 处理器调度

![20200909215905](http://chenyingqiao.github.io/img/20200909215905.png)

1. 高级调度： 又称作业调度、长程调度。从输入系统的一批作业(job, 用户提交给操作系统计算的一个独立任务)中按照预定的调度策略挑选若干作业进入内存，为其分配所需资源并创建对应作业的用户进程。
2. 中级调度： 又称平衡调度，中程调度。根据内存资源情况决定内存所能容纳的进程数目，并完成外存和内存中进程对换工作。
2. 低级调度：又称进程调度/线程调度，短程调度。根据某种原则决定就绪队列中那个进程/线程先获得处理器，并将处理器出让给它使用。

# 进程调度

**先来先服务调度**

![20200909203734](http://chenyingqiao.github.io/img/20200909203734.png)

**短作业调度算法**

![20200909203828](http://chenyingqiao.github.io/img/20200909203828.png)

**高响应比高者调度算法**

![20200909204044](http://chenyingqiao.github.io/img/20200909204044.png)

**优先数调度算法**

![20200909204115](http://chenyingqiao.github.io/img/20200909204115.png)

**循环轮转调度法**

![20200909204250](http://chenyingqiao.github.io/img/20200909204250.png)

# PV操作

> PV操作都是原语操作， 不可中断。

**锁：**

死锁： 一组进程因争夺资源陷入永远等待的状态。

饥饿： 一个可运行进程由于由于其他进程总是优先于它，而被调度程序无限期地拖延而不能被执行

导致死锁的原因

1. 互斥条件。 临界资源是独占资源，进程应互斥且排他地使用这些资源。
2. 占有和等待条件。 进程在请求资源得不到满足而等待时，不释放已占有的资源。
3. 不剥夺条件。已获资源只能由进程资源释放，不允许被其他程序剥夺。
4. 循环等待条件。 存在循环等待链，其中每个进程都在等待下一个进程所持有的资源。



# 临界区管理

并发进程中与共享变量有关的程序段称为临界区(Critical Section)。共享变量所代表的资源称为临界资源(Critical Resource)，即一次仅能供一个进程使用的资源。

临界区调度原则：
a. 择一而入。 一次之多只有一个进程进入临界区内执行。
b. 忙则要等。 如果已有进程在临界区中， 试图进入此临界区的其他进程应等待。
c. 有限等待。 进入临界区内的进程应在有限时间内退出。


# 内存管理

内存地址分类

1. 逻辑地址
2. 物理地址

地址转换：在多道程序环境下，程序中的逻辑地址与内存中的物理地址不可能一致，因此存储管理器必须提供地址变换功能，把逻辑地址转换成相应的物理地址。

![20200909220519](http://chenyingqiao.github.io/img/20200909220519.png)

[内存管理](https://blog.csdn.net/qq_29677867/article/details/91038642#111__3)
