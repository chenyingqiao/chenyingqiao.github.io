<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lerko Blog</title>
    <description>迷茫</description>
    <link>https://chenyingqiao.github.io//</link>
    <atom:link href="https://chenyingqiao.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 30 Dec 2016 14:22:10 +0800</pubDate>
    <lastBuildDate>Fri, 30 Dec 2016 14:22:10 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>有限状态机</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;认识有限状态级&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/finite-state-machine.png&quot; alt=&quot;fsm&quot; title=&quot;有限状态机&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;有限状态机器有3个特征&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;状态总数（state）是有限的。&lt;/li&gt;
  &lt;li&gt;任一时刻，只处在一种状态之中。&lt;/li&gt;
  &lt;li&gt;某种条件下，会从一种状态转变（transition）到另一种状态。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;js&quot;&gt;在js中的应用&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;下面介绍一个有限状态机的函数库Javascript Finite State Machine。这个库非常好懂，可以帮助我们加深理解，而且功能一点都不弱。
该库提供一个全局对象StateMachine，使用该对象的create方法，可以生成有限状态机的实例。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fsm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StateMachine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//生成的时候，需要提供一个参数对象，用来描述实例的性质。比如，交通信号灯（红绿灯）可以这样描述：&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fsm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StateMachine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　　&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;green&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　　&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　　　　&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;warn&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;green&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;yellow&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　　　　&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;stop&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;yellow&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;red&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　　　　&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;ready&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;red&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;yellow&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　　　　&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;go&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;yellow&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;green&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　　&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;交通信号灯的初始状态（initial）为green，events属性是触发状态改变的各种事件，比如warn事件使得green状态变成yellow状态，stop事件使得yellow状态变成red状态等等。
生成实例以后，就可以随时查询当前状态。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt; &lt;span class=&quot;nx&quot;&gt;fsm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//返回当前状态。&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;fsm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//返回一个布尔值，表示状态s是否为当前状态。&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;fsm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;can&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//返回一个布尔值，表示事件e是否能在当前状态触发。&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;fsm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cannot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//返回一个布尔值，表示事件e是否不能在当前状态触发。&lt;/span&gt;
&lt;/div&gt;

&lt;p&gt;更多概念查看&lt;a href=&quot;http://www.ruanyifeng.com/blog/2013/09/finite-state_machine_for_javascript.html&quot;&gt;阮一峰博客&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 26 Dec 2016 00:00:00 +0800</pubDate>
        <link>https://chenyingqiao.github.io//2016/12/26/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA%E7%9A%84%E5%BA%94%E7%94%A8/</link>
        <guid isPermaLink="true">https://chenyingqiao.github.io//2016/12/26/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
        
        <category>数据结构与算法</category>
        
        
      </item>
    
      <item>
        <title>sass入门</title>
        <description>&lt;h2 id=&quot;sass&quot;&gt;什么是sass&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sass 是对 CSS 的扩展，让 CSS 语言更强大、优雅。 它允许你使用变量、嵌套规则、 mixins、导入等众多功能， 并且完全兼容 CSS 语法。 Sass 有助于保持大型样式表结构良好， 同时也让你能够快速开始小型项目， 特别是在搭配 Compass 样式库一同使用时。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;嵌套&lt;/h2&gt;
&lt;p&gt;## 变量&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Dec 2016 00:00:00 +0800</pubDate>
        <link>https://chenyingqiao.github.io//2016/12/26/sass%E5%85%A5%E9%97%A8/</link>
        <guid isPermaLink="true">https://chenyingqiao.github.io//2016/12/26/sass%E5%85%A5%E9%97%A8/</guid>
        
        <category>web</category>
        
        
      </item>
    
      <item>
        <title>laravel深度入门</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;初始化流程&lt;/h2&gt;

&lt;h3 id=&quot;http-&quot;&gt;http 的初始化&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;引入composer的autoload&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;实例化Applocation（初始化ioc容器，application本身就是ioc容器。并且注册本身到自己的ioc容器中。注册基础的服务提供者【并且执行服务提供者的register和boot方法】。注册一些类别名到ioc容器）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;注册Http的Kernel到ioc容器&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;从make中去除kernel（实例化了kernel，kernel调用了一些bootstrap的类来初始化一些系统功能【门面注册，内容提供者注册–app.php中配置的那些】，调用application的boot方法等）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;捕获Request&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;发送response（Symfony\Component\HttpFoundation\Response）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;console-&quot;&gt;console 的初始化&lt;/h3&gt;

&lt;h2 id=&quot;section-1&quot;&gt;几个重要的系统定义初始化的值&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Illuminate\Foundation\Http\Kernel  $bootstrappers 初始化一些系统的必须类 包括下面的几个类  （都有bootstrap()方法  初始化了系统绝大多数东西）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;    protected $bootstrappers = [
        &#39;Illuminate\Foundation\Bootstrap\DetectEnvironment&#39;,
        &#39;Illuminate\Foundation\Bootstrap\LoadConfiguration&#39;,
        &#39;Illuminate\Foundation\Bootstrap\ConfigureLogging&#39;,
        &#39;Illuminate\Foundation\Bootstrap\HandleExceptions&#39;, 
 		//初始化门面
 		&#39;Illuminate\Foundation\Bootstrap\RegisterFacades&#39;,
		//初始化内容提供者
 		&#39;Illuminate\Foundation\Bootstrap\RegisterProviders&#39;,
        //调用Applocation实例到ioc容器中
        &#39;Illuminate\Foundation\Bootstrap\BootProviders&#39;,
    ];
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;application 注册核心的别名到ioc容器中  契约以及契约的实现类&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt; public function registerCoreContainerAliases(){
        $aliases = [ &#39;app&#39; =&amp;gt; [&#39;Illuminate\Foundation\Application&#39;, &#39;Illuminate\Contracts\Container\Container&#39;, &#39;Illuminate\Contracts\Foundation\Application&#39;],
            &#39;auth&#39;                 =&amp;gt; [&#39;Illuminate\Auth\AuthManager&#39;, &#39;Illuminate\Contracts\Auth\Factory&#39;],
            &#39;auth.driver&#39;          =&amp;gt; [&#39;Illuminate\Contracts\Auth\Guard&#39;],
            &#39;blade.compiler&#39;       =&amp;gt; [&#39;Illuminate\View\Compilers\BladeCompiler&#39;],
            &#39;cache&#39;                =&amp;gt; [&#39;Illuminate\Cache\CacheManager&#39;, &#39;Illuminate\Contracts\Cache\Factory&#39;],
            &#39;cache.store&#39;          =&amp;gt; [&#39;Illuminate\Cache\Repository&#39;, &#39;Illuminate\Contracts\Cache\Repository&#39;],
            &#39;config&#39;               =&amp;gt; [&#39;Illuminate\Config\Repository&#39;, &#39;Illuminate\Contracts\Config\Repository&#39;],
            &#39;cookie&#39;               =&amp;gt; [&#39;Illuminate\Cookie\CookieJar&#39;, &#39;Illuminate\Contracts\Cookie\Factory&#39;, &#39;Illuminate\Contracts\Cookie\QueueingFactory&#39;],
            &#39;encrypter&#39;            =&amp;gt; [&#39;Illuminate\Encryption\Encrypter&#39;, &#39;Illuminate\Contracts\Encryption\Encrypter&#39;],
            &#39;db&#39;                   =&amp;gt; [&#39;Illuminate\Database\DatabaseManager&#39;],
            &#39;db.connection&#39;        =&amp;gt; [&#39;Illuminate\Database\Connection&#39;, &#39;Illuminate\Database\ConnectionInterface&#39;],
            &#39;events&#39;               =&amp;gt; [&#39;Illuminate\Events\Dispatcher&#39;, &#39;Illuminate\Contracts\Events\Dispatcher&#39;],
            &#39;files&#39;                =&amp;gt; [&#39;Illuminate\Filesystem\Filesystem&#39;],
            &#39;filesystem&#39;           =&amp;gt; [&#39;Illuminate\Filesystem\FilesystemManager&#39;, &#39;Illuminate\Contracts\Filesystem\Factory&#39;],
            &#39;filesystem.disk&#39;      =&amp;gt; [&#39;Illuminate\Contracts\Filesystem\Filesystem&#39;],
            &#39;filesystem.cloud&#39;     =&amp;gt; [&#39;Illuminate\Contracts\Filesystem\Cloud&#39;],
            &#39;hash&#39;                 =&amp;gt; [&#39;Illuminate\Contracts\Hashing\Hasher&#39;],
            &#39;translator&#39;           =&amp;gt; [&#39;Illuminate\Translation\Translator&#39;, &#39;Symfony\Component\Translation\TranslatorInterface&#39;],
            &#39;log&#39;                  =&amp;gt; [&#39;Illuminate\Log\Writer&#39;, &#39;Illuminate\Contracts\Logging\Log&#39;, &#39;Psr\Log\LoggerInterface&#39;],
            &#39;mailer&#39;               =&amp;gt; [&#39;Illuminate\Mail\Mailer&#39;, &#39;Illuminate\Contracts\Mail\Mailer&#39;, &#39;Illuminate\Contracts\Mail\MailQueue&#39;],
            &#39;auth.password&#39;        =&amp;gt; [&#39;Illuminate\Auth\Passwords\PasswordBrokerManager&#39;, &#39;Illuminate\Contracts\Auth\PasswordBrokerFactory&#39;],
            &#39;auth.password.broker&#39; =&amp;gt; [&#39;Illuminate\Auth\Passwords\PasswordBroker&#39;, &#39;Illuminate\Contracts\Auth\PasswordBroker&#39;],
            &#39;queue&#39;                =&amp;gt; [&#39;Illuminate\Queue\QueueManager&#39;, &#39;Illuminate\Contracts\Queue\Factory&#39;, &#39;Illuminate\Contracts\Queue\Monitor&#39;],
            &#39;queue.connection&#39;     =&amp;gt; [&#39;Illuminate\Contracts\Queue\Queue&#39;],
            &#39;queue.failer&#39;         =&amp;gt; [&#39;Illuminate\Queue\Failed\FailedJobProviderInterface&#39;],
            &#39;redirect&#39;             =&amp;gt; [&#39;Illuminate\Routing\Redirector&#39;],
            &#39;redis&#39;                =&amp;gt; [&#39;Illuminate\Redis\Database&#39;, &#39;Illuminate\Contracts\Redis\Database&#39;],
            &#39;request&#39;              =&amp;gt; [&#39;Illuminate\Http\Request&#39;, &#39;Symfony\Component\HttpFoundation\Request&#39;],
            &#39;router&#39;               =&amp;gt; [&#39;Illuminate\Routing\Router&#39;, &#39;Illuminate\Contracts\Routing\Registrar&#39;],
            &#39;session&#39;              =&amp;gt; [&#39;Illuminate\Session\SessionManager&#39;],
            &#39;session.store&#39;        =&amp;gt; [&#39;Illuminate\Session\Store&#39;, &#39;Symfony\Component\HttpFoundation\Session\SessionInterface&#39;],
            &#39;url&#39;                  =&amp;gt; [&#39;Illuminate\Routing\UrlGenerator&#39;, &#39;Illuminate\Contracts\Routing\UrlGenerator&#39;],
            &#39;validator&#39;            =&amp;gt; [&#39;Illuminate\Validation\Factory&#39;, &#39;Illuminate\Contracts\Validation\Factory&#39;],
            &#39;view&#39;                 =&amp;gt; [&#39;Illuminate\View\Factory&#39;, &#39;Illuminate\Contracts\View\Factory&#39;], ];
        foreach ($aliases as $key =&amp;gt; $aliases) {
            foreach ($aliases as $alias) {
                $this-&amp;gt;alias($key, $alias);
            }
        }
}

 ```
 
 
 &amp;gt; app.php 配置文件中的aliases 就是吧对应的类设置别名（通过AliasLoad 去找到类【prependToLoaderStack】注册了门面的autoload）
 
 
## 需要知道的知识

```php
类：Closure
这个是一个回调函数的具体类
方法  bind(Closure $closure , object $newthis [, mixed $newscope = &#39;static&#39; ] ) 
	 bindto(object $newthis [, mixed $newscope = &#39;static&#39; ])

bind:将回调函数绑定到一个具体的类 $newthis（这个绑定之后才有上下文）
	$newscope 代表的是这个类的作用域（即回调函数能访问这个作用域【类】中的成员变量   也可以是一个命名空间加类名的字符串）
    即 $newthis是绑定上下文  $newscope取得上下文的变量
bindTo 参数如上

static::class --&amp;gt; 返回的是php这个类的域名以及类名的全部string

callable 标示一个可以调用的类型

接口：ArrayAccess：让类可以像数组一样的进行使用
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;//laravel的基础类
Macroable：实现了一个注册callable类型就可以添加到类中的trait
&lt;/div&gt;

&lt;h2 id=&quot;applocatin-&quot;&gt;applocatin 分析&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Applocation 类继承了接口：&lt;code class=&quot;highlighter-rouge&quot;&gt;IApplication, HttpKernelInterface&lt;/code&gt;,继承了类&lt;code class=&quot;highlighter-rouge&quot;&gt;Container&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Application 接口
```php
interface Application extends Container
{
  /**
    &lt;ul&gt;
      &lt;li&gt;获取laravel的版本&lt;/li&gt;
      &lt;li&gt;@return string
   */
  public function version();&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;/**
   * 获取laravel框架的基本路径（项目根目录）
   * @return string
   */
  public function basePath();&lt;/p&gt;

    &lt;p&gt;/**
   * 取得环境
   * @return string
   */
  public function environment();&lt;/p&gt;

    &lt;p&gt;/**
   * 判断框架是否是在维护
   * @return bool
   */
  public function isDownForMaintenance();&lt;/p&gt;

    &lt;p&gt;/**
   * 注册所有的配置提供者
   * @return void
   */
  public function registerConfiguredProviders();&lt;/p&gt;

    &lt;p&gt;/**
   * 注册服务提供者到applocation中  并且调用服务的register方法
   * @param  \Illuminate\Support\ServiceProvider|string  $provider
   * @param  array  $options
   * @param  bool   $force
   * @return \Illuminate\Support\ServiceProvider
   */
  public function register($provider, $options = [], $force = false);&lt;/p&gt;

    &lt;p&gt;/**
   *注册一个延迟的服务提供者（如果已经有注册服务的话就从deferredServices中unset服务 然后在调用register方法注册服务）
   * @param  string  $provider
   * @param  string  $service
   * @return void
   */
  public function registerDeferredProvider($provider, $service = null);&lt;/p&gt;

    &lt;p&gt;/**
   * 调用所有的boot的callback并且吧所有注册的服务提供者都调用boot方法
   * @return void
   */
  public function boot();&lt;/p&gt;

    &lt;p&gt;/**
   * 注册一个boot（框架启动的回调函数）
   *
   * @param  mixed  $callback
   * @return void
   */
  public function booting($callback);&lt;/p&gt;

    &lt;p&gt;/**
   * 注册一个框架启动完成之后的回调函数
   *
   * @param  mixed  $callback
   * @return void
   */
  public function booted($callback);&lt;/p&gt;

    &lt;p&gt;/**
   * Get the path to the cached “compiled.php” file.
   *
   * @return string
   */
  public function getCachedCompilePath();&lt;/p&gt;

    &lt;p&gt;/**
   * Get the path to the cached services.php file.
   *
   * @return string
   */
  public function getCachedServicesPath();
}
```&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;//http接口
interface HttpKernelInterface
{
    const MASTER_REQUEST = 1;
    const SUB_REQUEST = 2;
    public function handle(Request $request, $type = self::MASTER_REQUEST, $catch = true);
}
&lt;/div&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;//依赖注入容器
interface Container
{
    /**
     * Determine if the given abstract type has been bound.
     *
     * @param  string  $abstract
     * @return bool
     */
    public function bound($abstract);

    /**
     * Alias a type to a different name.
     *
     * @param  string  $abstract
     * @param  string  $alias
     * @return void
     */
    public function alias($abstract, $alias);

    /**
     * Assign a set of tags to a given binding.
     *
     * @param  array|string  $abstracts
     * @param  array|mixed   ...$tags
     * @return void
     */
    public function tag($abstracts, $tags);

    /**
     * Resolve all of the bindings for a given tag.
     *
     * @param  array  $tag
     * @return array
     */
    public function tagged($tag);

    /**
     * Register a binding with the container.
     *
     * @param  string|array  $abstract
     * @param  \Closure|string|null  $concrete
     * @param  bool  $shared
     * @return void
     */
    public function bind($abstract, $concrete = null, $shared = false);

    /**
     * Register a binding if it hasn&#39;t already been registered.
     *
     * @param  string  $abstract
     * @param  \Closure|string|null  $concrete
     * @param  bool  $shared
     * @return void
     */
    public function bindIf($abstract, $concrete = null, $shared = false);

    /**
     * Register a shared binding in the container.
     *
     * @param  string|array  $abstract
     * @param  \Closure|string|null  $concrete
     * @return void
     */
    public function singleton($abstract, $concrete = null);

    /**
     * &quot;Extend&quot; an abstract type in the container.
     *
     * @param  string    $abstract
     * @param  \Closure  $closure
     * @return void
     *
     * @throws \InvalidArgumentException
     */
    public function extend($abstract, Closure $closure);

    /**
     * Register an existing instance as shared in the container.
     *
     * @param  string  $abstract
     * @param  mixed   $instance
     * @return void
     */
    public function instance($abstract, $instance);

    /**
     * Define a contextual binding.
     *
     * @param  string  $concrete
     * @return \Illuminate\Contracts\Container\ContextualBindingBuilder
     */
    public function when($concrete);

    /**
     * Resolve the given type from the container.
     *
     * @param  string  $abstract
     * @param  array   $parameters
     * @return mixed
     */
    public function make($abstract, array $parameters = []);

    /**
     * Call the given Closure / class@method and inject its dependencies.
     *
     * @param  callable|string  $callback
     * @param  array  $parameters
     * @param  string|null  $defaultMethod
     * @return mixed
     */
    public function call($callback, array $parameters = [], $defaultMethod = null);

    /**
     * Determine if the given abstract type has been resolved.
     *
     * @param  string $abstract
     * @return bool
     */
    public function resolved($abstract);

    /**
     * Register a new resolving callback.
     *
     * @param  string    $abstract
     * @param  \Closure|null  $callback
     * @return void
     */
    public function resolving($abstract, Closure $callback = null);

    /**
     * Register a new after resolving callback.
     *
     * @param  string    $abstract
     * @param  \Closure|null  $callback
     * @return void
     */
    public function afterResolving($abstract, Closure $callback = null);
}
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;Illuminate\Config\Repository&lt;/code&gt;读取配置文件的数据&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;apploction 初始化注册的的基础服务和基础容器&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;基础服务
```php
//事件服务
class EventServiceProvider extends ServiceProvider
{
 /**
    &lt;ul&gt;
      &lt;li&gt;Register the service provider.
  *&lt;/li&gt;
      &lt;li&gt;@return void
  */
 public function register()
 {
 $this-&amp;gt;app-&amp;gt;singleton(‘events’, function ($app) {
     return (new Dispatcher($app))-&amp;gt;setQueueResolver(function () use ($app) {
         return $app-&amp;gt;make(‘Illuminate\Contracts\Queue\Factory’);
     });
 });
 }
}
//路由服务
class RoutingServiceProvider extends ServiceProvider
{
 /**&lt;/li&gt;
      &lt;li&gt;Register the service provider.
  *&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;@return void
  */
 public function register()
 {
 $this-&amp;gt;registerRouter();&lt;/p&gt;

        &lt;p&gt;$this-&amp;gt;registerUrlGenerator();&lt;/p&gt;

        &lt;p&gt;$this-&amp;gt;registerRedirector();&lt;/p&gt;

        &lt;p&gt;$this-&amp;gt;registerPsrRequest();&lt;/p&gt;

        &lt;p&gt;$this-&amp;gt;registerPsrResponse();&lt;/p&gt;

        &lt;p&gt;$this-&amp;gt;registerResponseFactory();
 }
}
```
&amp;gt; 其实大部分初始化工作都在这两个服务里面&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;主要关注 &lt;code class=&quot;highlighter-rouge&quot;&gt;EventServiceProvider&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;核心概念&lt;/h2&gt;
&lt;p&gt;### 依赖注入
&amp;gt; 依赖注入接口&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;//Application 是这个接口的子类
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Illuminate\Contracts\Container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Container&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//判断是不是存在这个ioc
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$abstract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//别名ioc容器
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$abstract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//对ioc容器中的元素进行标注
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$abstracts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tagged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//绑定实现类到ioc容器
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$abstract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$concrete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$shared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bindIf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$abstract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$concrete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$shared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//单例的ioc容器
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;singleton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$abstract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$concrete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$abstract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Closure&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//每次都实例化的ioc容器
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$abstract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//容器限制条件
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$concrete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//遍历所有的容器 去除ioc实例
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$abstract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//调用ioc容器中的对应方法
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$defaultMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//是否注册ioc容器事件
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$abstract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//注册ioc容器解析事件
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolving&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$abstract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Closure&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//注册ioc容器解析之后的
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;afterResolving&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$abstract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Closure&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;依赖注入的一些类型&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;注册单例&lt;/li&gt;
  &lt;li&gt;注册别名&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-3&quot;&gt;服务提供者&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;服务提供者是一个在框架运行流程中可以注册到框架的applocation中 然后有两个主要的方法
1. register
2. boot

执行顺序 register-&amp;gt;boot

app.php配置文件中有许多初始化的服务提供者
系统的启动也是这些提供者提供的
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;门面&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;门面抽象类中的getFacadeAccessor（）方法（重载） 就是用来获取ioc容器中alias别名容器中对应的【契约=》类】；&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;//门面就是一个注册函数或者对象到类中 之后可以通过__callStatic 来访问这些方法
// 使得很多注册的门面可以直接通过static的方式进行访问
//门面类
namespace Illuminate\Support\Facades;
abstract class Facade

//门面注册类
namespace Illuminate\Foundation\Bootstrap;
class RegisterFacades
&lt;/div&gt;

&lt;h2 id=&quot;http&quot;&gt;主要使用（http）&lt;/h2&gt;

&lt;h3 id=&quot;section-5&quot;&gt;路由&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;路由文件web.php在App\Providers\RouteServiceProvider中被包含 并且吧这些都包含在一个group中&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;protected function mapWebRoutes()
{
    Route::group([
        &#39;middleware&#39; =&amp;gt; &#39;web&#39;,
        &#39;namespace&#39; =&amp;gt; $this-&amp;gt;namespace,
    ], function ($router) {
        require base_path(&#39;routes/web.php&#39;);
    });
}
&lt;/div&gt;

&lt;h3 id=&quot;section-6&quot;&gt;控制器&lt;/h3&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;abstract class Controller
{
    /**
     * The middleware registered on the controller.
     *
     * @var array
     */
    protected $middleware = [];

    /**
     * Register middleware on the controller. 注册一个中间件
     *
     * @param  array|string|\Closure  $middleware
     * @param  array   $options
     * @return \Illuminate\Routing\ControllerMiddlewareOptions
     */
    public function middleware($middleware, array $options = [])
    {
        foreach ((array) $middleware as $m) {
            $this-&amp;gt;middleware[] = [
                &#39;middleware&#39; =&amp;gt; $m,
                &#39;options&#39; =&amp;gt; &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;$options,
            ];
        }

        return new ControllerMiddlewareOptions($options);
    }

    /**
     * Get the middleware assigned to the controller.  获取注册到控制器的中间件
     *
     * @return array
     */
    public function getMiddleware()
    {
        return $this-&amp;gt;middleware;
    }

    /**
     * Execute an action on the controller.  调用控制器的方法
     *
     * @param  string  $method
     * @param  array   $parameters
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function callAction($method, $parameters)
    {
        return call_user_func_array([$this, $method], $parameters);
    }

    /**
     * Handle calls to missing methods on the controller.  调用控制器没有的方法抛出异常
     *
     * @param  array   $parameters
     * @return mixed
     *
     * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
     */
    public function missingMethod($parameters = [])
    {
        throw new NotFoundHttpException(&#39;Controller method not found.&#39;);
    }

    /**
     * Handle calls to missing methods on the controller.  调用未知方法直接抛出异常
     *
     * @param  string  $method
     * @param  array   $parameters
     * @return mixed
     *
     * @throws \BadMethodCallException
     */
    public function __call($method, $parameters)
    {
        throw new BadMethodCallException(&quot;Method [{$method}] does not exist.&quot;);
    }
}
&lt;/div&gt;

&lt;h3 id=&quot;section-7&quot;&gt;中间件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;用来过滤请求 然后可以对请求进行处理
比如 验证 跳转 过滤
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;php artisan make:middleware CheckAge 可以直接生成中间件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;普通中间件（中间件前）&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;class CheckAge
{
    public function handle($request, Closure $next)
    {
        return $next($request);
    }
}
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;后置中间件&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;class AfterMiddleware
{
    public function handle($request, Closure $next)
    {
        $response = $next($request);
        // 执行动作
        return $response;
    }
}
&lt;/div&gt;

&lt;h3 id=&quot;section-8&quot;&gt;队列&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;队列的实现  QueueServiceProvider 提供了队列的初始化
Worker类通过pcntl系列的函数创建队列线程&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 26 Dec 2016 00:00:00 +0800</pubDate>
        <link>https://chenyingqiao.github.io//2016/12/26/laravel%E6%B7%B1%E5%BA%A6%E5%85%A5%E9%97%A8/</link>
        <guid isPermaLink="true">https://chenyingqiao.github.io//2016/12/26/laravel%E6%B7%B1%E5%BA%A6%E5%85%A5%E9%97%A8/</guid>
        
        <category>database</category>
        
        
      </item>
    
      <item>
        <title>Js规范总结</title>
        <description>
</description>
        <pubDate>Mon, 26 Dec 2016 00:00:00 +0800</pubDate>
        <link>https://chenyingqiao.github.io//2016/12/26/js%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">https://chenyingqiao.github.io//2016/12/26/js%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/</guid>
        
        
      </item>
    
      <item>
        <title>从flv.js说llvm</title>
        <description>&lt;h2 id=&quot;llvm&quot;&gt;什么是LLVM&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;LLVM 命名最早源自于底层虚拟机（Low Level Virtual Machine）的缩写,由于命名带来的混乱，目前LLVM就是该项目的全称。LLVM 核心库提供了与编译器相关的支持，可以作为多种语言编译器的后台来使用。能够进行程序语言的编译期优化、链接优化、在线编译优化、代码生成。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;LLVM的项目是一个模块化和可重复使用的编译器和工具技术的集合。LLVM是伊利诺伊大学的一个研究项目，提供一个现代化的，基于SSA的编译策略能够同时支持静态和动态的任意编程语言的编译目标。自那时以来，已经成长为LLVM的主干项目，由不同的子项目组成，其中许多正在生产中使用的各种 商业和开源的项目，以及被广泛用于学术研究。[1]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;flvjsllvm&quot;&gt;从flv.js看LLVM&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;参考网址
&lt;a href=&quot;https://software.intel.com/zh-cn/articles/html5-asmjs&quot;&gt;HTML5标准与性能之四：asm.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;flvjs 使用的是Emscripten 
这个是一个可以吧c/c++编译成js或者html5应用的开源项目&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 24 Dec 2016 00:00:00 +0800</pubDate>
        <link>https://chenyingqiao.github.io//2016/12/24/%E4%BB%8Eflv.js%E8%AF%B4LLVM/</link>
        <guid isPermaLink="true">https://chenyingqiao.github.io//2016/12/24/%E4%BB%8Eflv.js%E8%AF%B4LLVM/</guid>
        
        
      </item>
    
      <item>
        <title>协同过滤算法</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;协同过滤算法的计算原理&lt;/h2&gt;

&lt;p&gt;皮尔逊相关系数理解&lt;/p&gt;

&lt;p&gt;x&amp;lt;-c(1,2,3,5,8)
y&amp;lt;-c(0.11,0.12,0.13,0.15,0.18)&lt;/p&gt;

&lt;p&gt;比如这两组数据
皮尔逊公式      [x-x数组平均值]*[y-y数组平均值]=》全部加起来/&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Dec 2016 00:00:00 +0800</pubDate>
        <link>https://chenyingqiao.github.io//2016/12/18/%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95/</link>
        <guid isPermaLink="true">https://chenyingqiao.github.io//2016/12/18/%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95/</guid>
        
        <category>server</category>
        
        
      </item>
    
      <item>
        <title>nginx服务器配置</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;首先找到配置文件&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;服务器是centos的环境
使用的是OneinStack这个php，java的运行环境一键安装工具&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个工具里面集成了一些列的sh脚本工具可以一键使用&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;一般配置文件的存放路径以及nginx的主要程序存放路径&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;server配置（nginx.conf） /usr/local/nginx/conf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ubuntu一般在 /etc/nginx/&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
主程序                             /etc/init.d/ngin

科普centos的一些基本命令
yum ：安装软件包 yum install &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;软件包名称]
rpm ：软件包管理工具  查看说有软件包 rpm -qa |grep httpd ---&amp;gt;后面是过滤选项

&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;现在是配置文件的内容&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;nginx 主要的配置文件nginx.conf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;user www www;
worker_processes auto;

error_log /data/wwwlogs/error_nginx.log crit;
pid /var/run/nginx.pid;
worker_rlimit_nofile 51200;

events &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    use epoll;
    worker_connections 51200;
    multi_accept on;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

http &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    include mime.types;
    default_type application/octet-stream;
    server_names_hash_bucket_size 128;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;
    client_max_body_size 1024m;
    sendfile on;
    tcp_nopush on;
    keepalive_timeout 120;
    server_tokens off;
    tcp_nodelay on;
    
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;

    &lt;span class=&quot;c&quot;&gt;#Gzip Compression&lt;/span&gt;
    gzip on;
    gzip_buffers 16 8k;
    gzip_comp_level 6;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_vary on;
    gzip_types
        text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml
        text/javascript application/javascript application/x-javascript
        text/x-json application/json application/x-web-app-manifest+json
        text/css text/plain text/x-component
        font/opentype application/x-font-ttf application/vnd.ms-fontobject
        image/x-icon;
    gzip_disable &lt;span class=&quot;s2&quot;&gt;&quot;MSIE [1-6]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(?!.*SV1)&quot;&lt;/span&gt;;

    &lt;span class=&quot;c&quot;&gt;#If you have a lot of static files to serve through Nginx then caching of the files&#39; metadata (not the actual files&#39; contents) can save some latency.&lt;/span&gt;
    open_file_cache &lt;span class=&quot;nv&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1000 &lt;span class=&quot;nv&quot;&gt;inactive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

&lt;span class=&quot;c&quot;&gt;######################## default ############################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#默认的代理配置（反向代理是nginx的一个重要功能）&lt;/span&gt;
    server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    listen 80;
    server_name 121.42.48.14;
    access_log /data/wwwlogs/access_nginx.log combined;
    root /data/wwwroot/default;
    index index.html index.htm index.php;
    location /nginx_status &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    location ~ &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;^/]&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;php&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/|&lt;span class=&quot;nv&quot;&gt;$)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#fastcgi_pass remote_php_ip:9000;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#这里对接fastcgi接口  &lt;/span&gt;
        fastcgi_pass unix:/dev/shm/php-cgi.sock;
        fastcgi_index index.php;
        include fastcgi.conf;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    location ~ .&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gif|jpg|jpeg|png|bmp|swf|flv|ico&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        expires 30d;
        access_log off;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    location ~ .&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;js|css&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;?&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        expires 7d;
        access_log off;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;########################## vhost #############################&lt;/span&gt;
    include vhost/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.conf; &lt;span class=&quot;c&quot;&gt;#这里包含了其他文件加里面的配置文件&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/div&gt;

&lt;h3 id=&quot;apache-&quot;&gt;附带我本机与apache共存的配置 （其实就改了一下端口）&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;端口更改需要service nginx restart一下进程&lt;/code&gt;
```shell
server {
    listen 8080 default_server;
    listen [::]:8080 default_server;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;root /var/www/Nginx;

# 这里需要加index.php 如果你开启了php的支持
index index.html index.php index.htm index.nginx-debian.html;
server_name _;
#location字段需要深入学习
location / {
    try_files $uri $uri/ =404;
}
location ~ \.php$ {
    include snippets/fastcgi-php.conf;
    fastcgi_pass unix:/var/run/php5-fpm.sock;
} }
&lt;/div&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2 id=&quot;fastcgi&quot;&gt;科普一下fastcgi&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nginx不支持对外部程序的直接调用或者解析，所有的外部程序（包括PHP）必须通过FastCGI接口来调用。
FastCGI接口在Linux下是socket（这个socket可以是文件socket，也可以是ip socket）。
为了调用CGI程序，还需要一个FastCGI的wrapper（wrapper可以理解为用于启动另一个程序的程序），
这个wrapper绑定在某个固定socket上，如端口或者文件socket。当Nginx将CGI请求发送给这个socket的时候，
通过FastCGI接口，wrapper接收到请求，然后派生出一个新的线程，
这个线程调用解释器或者外部程序处理脚本并读取返回数据；
接着，wrapper再将返回的数据通过FastCGI接口，
沿着固定的socket传递给Nginx；最后，Nginx将返回的数据发送给客户端。这就是Nginx+FastCGI的整个运作过程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;php-fpm&quot;&gt;php-fpm&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;上面说明了fastcgi  php-fpm其实是一个fastcgi的管理器
百度百科上面这样说明的
&lt;code class=&quot;highlighter-rouge&quot;&gt;PHP-FPM是一个PHPFastCGI管理器，是只用于PHP的。&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 18 Dec 2016 00:00:00 +0800</pubDate>
        <link>https://chenyingqiao.github.io//2016/12/18/nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</link>
        <guid isPermaLink="true">https://chenyingqiao.github.io//2016/12/18/nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</guid>
        
        <category>server</category>
        
        
      </item>
    
      <item>
        <title>crontab工具的使用</title>
        <description>&lt;h2 id=&quot;crontab&quot;&gt;如何查看crontab是否安装？以及初次使用&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们可以铜鼓 crontab -l就可以查看是否crontab这个工具是否有安装&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;crontab -l
如果出现 no crontab for root的话输入
crontab -e
会有如下的选项
no crontab for root - using an empty one

Select an editor.  To change later, run &#39;select-editor&#39;.
  1. /bin/ed
  2. /bin/nano        &amp;lt;---- easiest
  3. /usr/bin/vim.basic
  4. /usr/bin/vim.tiny

Choose 1-4 [2]: 4     ----&amp;gt;我们一般选择的是第4个配置文件

之后我们就可以输入crontab -e对配置文件进行编辑

配置文件默认的内容是一些注释的说明 可以删除

比如我们要创建一个任务 
    {每分钟执行往tmp目录下的某个文件写如当前日期信息}
我们就可以这样写（&amp;gt;&amp;gt;标示的是将data输出的内容保存到文件中）
*/1 * * * * date &amp;gt;&amp;gt; /tmp/crontab_log.txt
&lt;/div&gt;

&lt;p&gt;## crontab -e 中配置文件的配置格式&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;
* * * * * command
第一个× ：分钟 0-59
第二个× ：小时0-23
第三个× ：日期1-31
第四个× ：月份1-12
第五个× ：星期0-7

下面有几个实例
每晚的21:30 从其apache
    30 21 * * *　　service httpd restart
每月1好10号22号的４：４５重启apache
    45 4 1,10,22 * * service httpd result
每月的1-10号de 4:45 重启apache
    45 4 1-10 * * service httpd result
每分钟从启apache
    */2 * * * * service httpd restart
    1-59/2 * * * * service httpd restart
晚上１１点到早上７点之间，每个一小时从启ａｐａｃｈｅ
    0 23-7/1 * * * service httpd restart
每天固定2点时间启动ｐｙｔｈｏｎ脚本
    0 2 * * * python xxx.py

&lt;/div&gt;
</description>
        <pubDate>Sun, 18 Dec 2016 00:00:00 +0800</pubDate>
        <link>https://chenyingqiao.github.io//2016/12/18/linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1Crontab%E5%B7%A5%E5%85%B7/</link>
        <guid isPermaLink="true">https://chenyingqiao.github.io//2016/12/18/linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1Crontab%E5%B7%A5%E5%85%B7/</guid>
        
        <category>server</category>
        
        
      </item>
    
      <item>
        <title>ps 进程管理命令</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;查看所有用户的进程&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;ps aux&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;ps aux | grep [key]     可以进行筛选&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;一些基本用法&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;    ps a 显示现行终端机下的所有程序，包括其他用户的程序。 
    ps -A 显示所有程序。 
    ps c 列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。 
    ps -e 此参数的效果和指定&quot;A&quot;参数相同。 
    ps e 列出程序时，显示每个程序所使用的环境变量。 
    ps f 用ASCII字符显示树状结构，表达程序间的相互关系。 
    ps -H 显示树状结构，表示程序间的相互关系。 
    ps -N 显示所有的程序，除了执行ps指令终端机下的程序之外。 
    ps s 采用程序信号的格式显示程序状况。 
    ps S 列出程序时，包括已中断的子程序资料。 
    ps -t&amp;lt;终端机编号&amp;gt; 指定终端机编号，并列出属于该终端机的程序的状况。 
    ps u 以用户为主的格式来显示程序状况。 
    ps x 显示所有程序，不以终端机来区分。
&lt;/div&gt;

&lt;h4 id=&quot;section-2&quot;&gt;下面是一个例子&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.0 121764  5856 ?        Ss   09:59   0:01 /sbin/init splash
root         2  0.0  0.0      0     0 ?        S    09:59   0:00 [kthreadd]
root         3  0.0  0.0      0     0 ?        S    09:59   0:00 [ksoftirqd/0]
root         5  0.0  0.0      0     0 ?        S&amp;lt;   09:59   0:00 [kworker/0:0H]
root         7  0.1  0.0      0     0 ?        S    09:59   0:04 [rcu_sched]
root         8  0.0  0.0      0     0 ?        S    09:59   0:00 [rcu_bh]
root         9  0.0  0.0      0     0 ?        S    09:59   0:00 [migration/0]
root        10  0.0  0.0      0     0 ?        S    09:59   0:00 [watchdog/0]
root        11  0.0  0.0      0     0 ?        S    09:59   0:00 [watchdog/1]
root        12  0.0  0.0      0     0 ?        S    09:59   0:00 [migration/1]
root        13  0.0  0.0      0     0 ?        S    09:59   0:00 [ksoftirqd/1]
root        15  0.0  0.0      0     0 ?        S&amp;lt;   09:59   0:00 [kworker/1:0H]
root        16  0.0  0.0      0     0 ?        S    09:59   0:00 [watchdog/2]

USER:该进程属于哪个用户账号的
PID：该进程的进程标识符
%CPU：该进程使用掉的CPU资源百分比
%MEM：该进程所占用掉的物理内存百分比
VSZ：该进程使用掉的虚拟内存量（KB）
RSS：该进程占用的固定的内存量（KB）
TTY：该进程是在哪个终端机上运行，若与终端机无关则显示“？”
STAT：该进程目前的状态，与ps -l显示的S标识相同
START：该进程被触发启动的时间
TIME：该进程实际占用的CPU时间
COMMAND：该进程的实际命令
&lt;/div&gt;

&lt;h4 id=&quot;stat&quot;&gt;关于stat标示列&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;    D    不可中断     Uninterruptible sleep (usually IO)
    R    正在运行，或在队列中的进程
    S    处于休眠状态
    T    停止或被追踪
    Z    僵尸进程
    W    进入内存交换（从内核2.6开始无效）
    X    死掉的进程


    &amp;lt;    高优先级
    N    低优先级
    L    有些页被锁进内存
    s    包含子进程
    +    位于后台的进程组；
    l    多线程，克隆线程  multi-threaded (using CLONE_THREAD, like NPTL pthreads do)
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;想在我运行一个swoole的tcpserver
然后我查看 &lt;code class=&quot;highlighter-rouge&quot;&gt;ps aux |grep php&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;chen@chen-pc:/var/www/html/test/swoole$ *ps auxf | grep php*
root      1069  0.0  0.2 317444 28224 ?        Ss   09:59   0:00 php-fpm: master process (/etc/php5/fpm/php-fpm.conf)
www-data  1115  0.0  0.0 317444  8860 ?        S    09:59   0:00  \_ php-fpm: pool www
www-data  1116  0.0  0.0 317444  8860 ?        S    09:59   0:00  \_ php-fpm: pool www
chen     14639  0.0  0.0  14464  2148 pts/1    S+   11:27   0:00      \_ grep php
chen      7957  0.0  0.1 595384 10916 ?        Ssl  10:44   0:00 php5 -f tcp_server.php
chen      7958  0.0  0.1 299436 10104 ?        S    10:44   0:00  \_ php5 -f tcp_server.php
chen      7963  0.0  0.1 285640 10392 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7964  0.0  0.1 285640 10392 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7965  0.0  0.1 285640 10392 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7966  0.0  0.1 285640 10392 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7967  0.0  0.1 285640 10392 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7968  0.0  0.1 285640 12980 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7969  0.0  0.1 285640 10392 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7970  0.0  0.1 285640 10396 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7974  0.0  0.1 595384 10900 ?        Ssl  10:44   0:00 php5 -f tcp_server.php
chen      7975  0.0  0.0 299436 10028 ?        S    10:44   0:00  \_ php5 -f tcp_server.php
chen      7980  0.0  0.1 285640 10348 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7981  0.0  0.1 285640 10348 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7982  0.0  0.1 285640 10348 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7983  0.0  0.1 285640 10348 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7984  0.0  0.1 285640 10348 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7985  0.0  0.1 285640 10348 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7986  0.0  0.1 285640 10348 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7987  0.0  0.1 285640 10352 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
&lt;/div&gt;

&lt;p&gt;我们可以看到有两个 stat为 Ssl的tcp_server.php的进程&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;因为我不小心运行了两次&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;学习如何杀死进程&lt;/h2&gt;

&lt;h4 id=&quot;kill-&quot;&gt;kill 命令的使用&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*kill[参数][进程号]*&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;-l  信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称
-a  当处理当前进程时，不限制命令名和进程号的对应关系
-p  指定kill 命令只打印相关进程的进程号，而不发送任何信号
-s  指定发送信号
-u  指定用户 
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;实例1：列出所有信号名称&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*kill -l*&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;chen@chen-pc:/var/www/html/test/swoole$ kill -l
 1) SIGHUP   2) SIGINT   3) SIGQUIT  4) SIGILL   5) SIGTRAP
 6) SIGABRT  7) SIGBUS   8) SIGFPE   9) SIGKILL 10) SIGUSR1
11) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM
16) SIGSTKFLT   17) SIGCHLD 18) SIGCONT 19) SIGSTOP 20) SIGTSTP
21) SIGTTIN 22) SIGTTOU 23) SIGURG  24) SIGXCPU 25) SIGXFSZ
26) SIGVTALRM   27) SIGPROF 28) SIGWINCH    29) SIGIO   30) SIGPWR
31) SIGSYS  34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3
38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8
43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13
48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12
53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7
58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2
63) SIGRTMAX-1  64) SIGRTMAX    


只有第9种信号(SIGKILL)才可以无条件终止进程，其他信号进程都有权利忽略。    下面是常用的信号：
HUP    1    终端断线
INT     2    中断（同 Ctrl + C）
QUIT    3    退出（同 Ctrl + \）
TERM   15    终止
KILL    9    强制终止
CONT   18    继续（与STOP相反， fg/bg命令）
STOP    19    暂停（同 Ctrl + Z）
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;实例2：先用ps查找进程，然后用kill杀掉&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*kill 3268*&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;实例3：彻底杀死进程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*kill -9 223*&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;实例4：杀死指定用户所有进程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kill -9 $(ps -ef | grep peidalinux)&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;kill -u peidalinux&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;实例5：init进程是不可杀的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kill -9 1&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;[root@localhost ~]# ps -ef|grep init
root         1     0  0 Nov02 ?        00:00:00 init [3]                  
root     17563 17534  0 17:37 pts/1    00:00:00 grep init
[root@localhost ~]# kill -9 1
[root@localhost ~]# kill -HUP 1
[root@localhost ~]# ps -ef|grep init
root         1     0  0 Nov02 ?        00:00:00 init [3]                  
root     17565 17534  0 17:38 pts/1    00:00:00 grep init
[root@localhost ~]# kill -KILL 1
[root@localhost ~]# ps -ef|grep init
root         1     0  0 Nov02 ?        00:00:00 init [3]                  
root     17567 17534  0 17:38 pts/1    00:00:00 grep init
[root@localhost ~]#
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;现在我们要杀死一个tcp_server.php 的重复进程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;chen@chen-pc:/var/www/html/test/swoole$ `kill 7974`
chen@chen-pc:/var/www/html/test/swoole$ ps auxf | grep php
root      1069  0.0  0.2 317444 28224 ?        Ss   09:59   0:00 php-fpm: master process (/etc/php5/fpm/php-fpm.conf)
www-data  1115  0.0  0.0 317444  8860 ?        S    09:59   0:00  \_ php-fpm: pool www
www-data  1116  0.0  0.0 317444  8860 ?        S    09:59   0:00  \_ php-fpm: pool www
chen     15469  0.0  0.0  14464  2224 pts/1    S+   11:41   0:00      \_ grep php
chen      7957  0.0  0.1 595384 10916 ?        Ssl  10:44   0:00 php5 -f tcp_server.php
chen      7958  0.0  0.1 299436 10104 ?        S    10:44   0:00  \_ php5 -f tcp_server.php
chen      7963  0.0  0.1 285640 10392 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7964  0.0  0.1 285640 10392 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7965  0.0  0.1 285640 10392 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7966  0.0  0.1 285640 10392 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7967  0.0  0.1 285640 10392 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7968  0.0  0.1 285640 12980 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7969  0.0  0.1 285640 10392 ?        S    10:44   0:00      \_ php5 -f tcp_server.php
chen      7970  0.0  0.1 285640 10396 ?        S    10:44   0:00      \_ php5 -f tcp_server.php

&lt;/div&gt;

</description>
        <pubDate>Sun, 18 Dec 2016 00:00:00 +0800</pubDate>
        <link>https://chenyingqiao.github.io//2016/12/18/linux-ps%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</link>
        <guid isPermaLink="true">https://chenyingqiao.github.io//2016/12/18/linux-ps%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</guid>
        
        <category>server</category>
        
        
      </item>
    
      <item>
        <title>webpack入门</title>
        <description>&lt;h2 id=&quot;webpack&quot;&gt;webpack&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;webpack 是一个可以让程序员可以使用require()
可以包含js以及css和各种web资源  并且支持一些资源的转换
吧这些资源打包到在一起&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;初次使用&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install webpack&lt;/code&gt;安装webpack&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;项目目录&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;---app
	
&lt;/div&gt;
</description>
        <pubDate>Thu, 15 Dec 2016 00:00:00 +0800</pubDate>
        <link>https://chenyingqiao.github.io//2016/12/15/webpack%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</link>
        <guid isPermaLink="true">https://chenyingqiao.github.io//2016/12/15/webpack%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</guid>
        
        <category>database</category>
        
        
      </item>
    
  </channel>
</rss>
